"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

exports.onCreatePage = function (_ref, pluginOptions) {
  var page = _ref.page,
      pathPrefix = _ref.pathPrefix,
      actions = _ref.actions;

  if (pluginOptions.useAutoGen) {
    var createPage = actions.createPage,
        deletePage = actions.deletePage;
    var defaultOptions = {
      trailingSlashes: false,
      exclude: []
    };
    var optionsActual = (0, _extends2.default)((0, _extends2.default)({}, defaultOptions), pluginOptions);
    var _optionsActual$crumbL = optionsActual.crumbLabelUpdates,
        crumbLabelUpdates = _optionsActual$crumbL === void 0 ? [] : _optionsActual$crumbL,
        trailingSlashes = optionsActual.trailingSlashes; // for pages not excludecd, create crumbs out of each section of the page path

    if (!optionsActual.exclude.includes(page.path)) {
      var acc = '';
      var crumbs = [];
      var splitUrl = pathPrefix ? page.path.replace(new RegExp("^" + pathPrefix), '').split('/') : page.path.split('/');
      splitUrl.forEach(function (split, index) {
        if (index === 0 && split === '') {
          // root or 'home' section of path
          crumbs = [].concat(crumbs, [{
            pathname: '/',
            crumbLabel: optionsActual.autoGenHomeLabel || 'Home'
          }]);
        } else if (index !== 0 && split !== '') {
          // remaining sections of path
          acc += "/" + split;
          var n = acc.lastIndexOf('/'); // update crumbLabel for any crumbLabelUpdates otherwise use path

          var crumbLabel = acc.slice(n + 1).replace(/%20/g, ' ');
          crumbLabelUpdates.forEach(function (labelUpdate) {
            if (labelUpdate.pathname === acc) {
              crumbLabel = labelUpdate.crumbLabel;
            }
          });
          crumbs = [].concat(crumbs, [{
            pathname: acc,
            crumbLabel: crumbLabel
          }]);
        } else {
          // catch empty path sections
          crumbs = [].concat(crumbs);
        }
      }); // if trailingSlashes add a trailing slash to the end of
      // each crumb. Excluding root (/) and crumbs including a "." (ex: 404.html)

      if (trailingSlashes) {
        crumbs.forEach(function (crumb, index) {
          if (index !== 0 && crumb.pathname.indexOf('.') === -1) {
            crumbs[index].pathname = crumbs[index].pathname + "/";
          }
        });
      }

      var breadcrumb = {
        location: page.path,
        crumbs: crumbs
      }; // inject breadcrumbs into page context

      var oldPageContext = page.context;
      deletePage(page);
      createPage((0, _extends2.default)((0, _extends2.default)({}, page), {}, {
        context: (0, _extends2.default)((0, _extends2.default)({}, oldPageContext), {}, {
          breadcrumb: breadcrumb
        })
      }));
    }
  }
};